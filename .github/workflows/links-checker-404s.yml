name: 'General - Link Check for Documentation Sites'

on:
  schedule:
    - cron: '0 12 * * 1-5'  # 12:00 PM UTC, Monday–Friday
  # Manual run with options.
  workflow_dispatch:
    inputs:
      selected_project:
        description: 'Select a specific project (optional)'
        required: false
        type: choice
        options:
          - All
          - Tanssi
          - Moonbeam
          - Wormhole
          - kluster.ai
          - Polkadot
      create_issue:
        description: 'Create GitHub Issue if broken links are found?'
        required: false
        type: boolean
        default: true

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set filtered matrix
        id: set-matrix
        shell: bash
        run: |
          selected="${{ github.event.inputs.selected_project || 'All' }}"

          all_projects=$(jq -n '
            [
              { "mkdocs_repo": "papermoonio/kluster-mkdocs",   "docs_repo": "kluster-ai/docs",                 "mkdocs_repo_name": "kluster-mkdocs",   "docs_repo_name": "kluster-docs",   "root_dir": "",      "label": "kluster.ai" },
              { "mkdocs_repo": "papermoonio/polkadot-mkdocs",  "docs_repo": "polkadot-developers/polkadot-docs","mkdocs_repo_name": "polkadot-mkdocs",  "docs_repo_name": "polkadot-docs",  "root_dir": "",      "label": "Polkadot" },
              { "mkdocs_repo": "papermoonio/moonbeam-mkdocs",  "docs_repo": "moonbeam-foundation/moonbeam-docs","mkdocs_repo_name": "moonbeam-mkdocs",  "docs_repo_name": "moonbeam-docs",  "root_dir": "",      "label": "Moonbeam" },
              { "mkdocs_repo": "papermoonio/tanssi-mkdocs",    "docs_repo": "moondance-labs/tanssi-docs",      "mkdocs_repo_name": "tanssi-mkdocs",    "docs_repo_name": "tanssi-docs",    "root_dir": "",      "label": "Tanssi" },
              { "mkdocs_repo": "papermoonio/wormhole-mkdocs",  "docs_repo": "wormhole-foundation/wormhole-docs","mkdocs_repo_name": "wormhole-mkdocs",  "docs_repo_name": "wormhole-docs",  "root_dir": "/docs", "label": "Wormhole" }
            ]
          ')

          if [ "$selected" = "All" ]; then
            filtered="$all_projects"
          else
            filtered=$(echo "$all_projects" | jq -c --arg sel "$selected" '[.[] | select(.label == $sel)]')
          fi

          if [ -z "$filtered" ] || [ "$filtered" = "[]" ]; then
            echo "❌ Error: No projects matched filter '$selected'."
            exit 1
          fi

          echo "matrix=$(echo "$filtered" | jq -c '.')" >> "$GITHUB_OUTPUT"

  check-links:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      # Choose PAT per project
      - name: Select Token
        id: select_token
        run: |
          if [ "${{ matrix.label }}" = "Tanssi" ]; then
            echo "token=${{ secrets.GH_404_CHECKER_TANSSI }}" >> "$GITHUB_OUTPUT"
          else
            echo "token=${{ secrets.GH_404_CHECKER }}" >> "$GITHUB_OUTPUT"
          fi

      # Check out repos
      - name: 'Checkout MkDocs Repo: ${{ matrix.mkdocs_repo_name }}'
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.mkdocs_repo }}
          path: ${{ matrix.mkdocs_repo_name }}

      - name: 'Checkout Docs Content Repo: ${{ matrix.docs_repo_name }}'
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.docs_repo }}
          path: '${{ matrix.mkdocs_repo_name}}/${{ matrix.docs_repo_name}}'

      # Python + deps
      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 'Install dependencies'
        working-directory: ${{ matrix.mkdocs_repo_name }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Build site (note: some projects publish under a subdir)
      - name: 'Build MkDocs site'
        working-directory: ${{ matrix.mkdocs_repo_name }}
        run: mkdocs build -d "site${{ matrix.root_dir }}"

      # Run lychee ONCE; allow job to continue so we can handle failure ourselves.
      - name: 'Prepare Lychee Arguments'
        id: lychee_args
        shell: bash
        run: |
          ROOT="$(pwd)/${{ matrix.mkdocs_repo_name }}/site${{ matrix.root_dir }}"
          ARGS="--root-dir $ROOT --verbose --no-progress --accept 429,403"
          if [[ -f "$(pwd)/${{ matrix.mkdocs_repo_name }}/.urlignore" ]]; then
            echo "Found .urlignore; adding to args."
            ARGS="$ARGS --exclude-file $(pwd)/${{ matrix.mkdocs_repo_name }}/.urlignore"
          fi
          echo "args=$ARGS" >> "$GITHUB_OUTPUT"

      - name: 'Run Link Checker'
        id: lychee
        uses: lycheeverse/lychee-action@v2.4.1
        with:
          args: >
            ${{ steps.lychee_args.outputs.args }}
            './**/*.html'
          # Write a Markdown report beside the site
          output: ./${{ matrix.mkdocs_repo_name }}/lychee-report.md
          # Non-zero exit if broken links found (so this step "fails")
          fail: true
          # Optional: lower concurrency a bit to be nice to hosts
          # threads: 4
        continue-on-error: true

      # Only run if lychee step failed (built-in)
      - name: 'Read Link Checker Report'
        if: failure()
        id: report
        run: |
          report_path="./${{ matrix.mkdocs_repo_name }}/lychee-report.md"
          if [ ! -s "$report_path" ]; then
            echo "No lychee report found; something else failed."
            echo "body=Link checker failed but no report was generated." >> "$GITHUB_OUTPUT"
            exit 0
          fi

          report_body=$(cat "$report_path")
          report_cleaned=$(echo "$report_body" | sed 's/^\s*//;s/\s*$//')

          {
            echo "body<<EOF"
            echo "### 🚨 Broken Links Detected in ${{ matrix.label }} Docs"
            echo
            echo "The scheduled link checker has found one or more broken links."
            echo "This issue was automatically generated by the [central docs workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})."
            echo
            echo "---"
            echo
            echo "#### 📝 Link Checker Report"
            echo
            echo "$report_cleaned"
            echo
            echo "---"
            echo "#### Next Steps"
            echo "1. **Investigate**: Check if the links are temporarily down or permanently gone."
            echo "2. **Fix**: Update the source markdown files in this repository."
            echo "3. **Close**: Once fixed, this issue can be closed."
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # Create the issue only when:
      #  - lychee failed (failure()), and
      #  - manual run requested issue creation, OR it's a scheduled run.
      - name: 'Create Issue on Failure'
        if: >
          failure() &&
          (
            (github.event_name == 'workflow_dispatch' && github.event.inputs.create_issue == 'true') ||
            (github.event_name == 'schedule')
          )
        id: create_issue
        env:
          GH_TOKEN: ${{ steps.select_token.outputs.token }}
        run: |
          gh issue create \
            --repo "${{ matrix.docs_repo }}" \
            --title "Broken Links Detected in ${{ matrix.label }} – $(date -u +'%Y-%m-%d')" \
            --body "${{ steps.report.outputs.body }}"
